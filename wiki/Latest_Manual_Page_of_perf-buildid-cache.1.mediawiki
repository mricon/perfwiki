---
title: Latest Manual Page of perf-buildid-cache.1
---


= NAME =

perf-buildid-cache - Manage build-id cache.

= SYNOPSIS =

<pre>perf buildid-cache &lt;options&gt;</pre>
= DESCRIPTION =

This command manages the build-id cache. It can add, remove, update and purge files to/from the cache. In the future it should as well set upper limits for the space used by the cache, etc. This also scans the target binary for SDT (Statically Defined Tracing) and record it along with the buildid-cache, which will be used by perf-probe. For more details, see [[Latest Manual Page of perf-probe.1|<tt>'''perf-probe'''(1)</tt>]].

= OPTIONS =

-a, --add=

<blockquote>Add specified file to the cache.
</blockquote>
-f, --force

<blockquote>Don’t complain, do it.
</blockquote>
-k, --kcore

<blockquote>Add specified kcore file to the cache. For the current host that is /proc/kcore which requires root permissions to read. Be aware that running ''perf buildid-cache'' as root may update root’s build-id cache not the user’s. Use the -v option to see where the file is created. Note that the copied file contains only code sections not the whole core image. Note also that files &quot;kallsyms&quot; and &quot;modules&quot; must also be in the same directory and are also copied. All 3 files are created with read permissions for root only. kcore will not be added if there is already a kcore in the cache (with the same build-id) that has the same modules at the same addresses. Use the -v option to see if a copy of kcore is actually made.
</blockquote>
-r, --remove=

<blockquote>Remove a cached binary which has same build-id of specified file from the cache.
</blockquote>
-p, --purge=

<blockquote>Purge all cached binaries including older caches which have specified path from the cache.
</blockquote>
-P, --purge-all

<blockquote>Purge all cached binaries. This will flush out entire cache.
</blockquote>
-M, --missing=

<blockquote>List missing build ids in the cache for the specified file.
</blockquote>
-u, --update=

<blockquote>Update specified file of the cache. Note that this doesn’t remove older entries since those may be still needed for annotating old (or remote) perf.data. Only if there is already a cache which has exactly same build-id, that is replaced by new one. It can be used to update kallsyms and kernel dso to vmlinux in order to support annotation.
</blockquote>
-l, --list

<blockquote>List all valid binaries from cache.
</blockquote>
-v, --verbose

<blockquote>Be more verbose.
</blockquote>
--target-ns=PID: Obtain mount namespace information from the target pid. This is used when creating a uprobe for a process that resides in a different mount namespace from the perf(1) utility.

--debuginfod[=URLs]

<blockquote>Specify debuginfod URL to be used when retrieving perf.data binaries, it follows the same syntax as the DEBUGINFOD_URLS variable, like:

<blockquote><pre>buildid-cache.debuginfod=http://192.168.122.174:8002

If the URLs is not specified, the value of DEBUGINFOD_URLS
system environment variable is used.</pre></blockquote></blockquote>
= SEE ALSO =

[[Latest Manual Page of perf-record.1|<tt>'''perf-record'''(1)</tt>]], [[Latest Manual Page of perf-report.1|<tt>'''perf-report'''(1)</tt>]], [[Latest Manual Page of perf-buildid-list.1|<tt>'''perf-buildid-list'''(1)</tt>]]


= KERNEL VERSION =

This page is auto-generated.  The kernel version is v6.0