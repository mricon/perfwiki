---
title: Latest Manual Page of perf-bench.1
---


= NAME =

perf-bench - General framework for benchmark suites

= SYNOPSIS =

<pre>perf bench [&lt;common options&gt;] &lt;subsystem&gt; &lt;suite&gt; [&lt;options&gt;]</pre>
= DESCRIPTION =

This ''perf bench'' command is a general framework for benchmark suites.

= COMMON OPTIONS =

-r, --repeat=

<blockquote>Specify amount of times to repeat the run (default 10).
</blockquote>
-f, --format=

<blockquote>Specify format style. Current available format styles are:
</blockquote>
''default''

<blockquote>Default style. This is mainly for human reading.
</blockquote>
<blockquote><pre>
.ft C
% perf bench sched pipe                      # with no style specified
(executing 1000000 pipe operations between two tasks)
        Total time:5.855 sec
                5.855061 usecs/op
                170792 ops/sec
.ft
</pre></blockquote>
''simple''

<blockquote>This simple style is friendly for automated processing by scripts.
</blockquote>
<blockquote><pre>
.ft C
% perf bench --format=simple sched pipe      # specified simple
5.988
.ft
</pre></blockquote>
= SUBSYSTEM =

''sched''

<blockquote>Scheduler and IPC mechanisms.
</blockquote>
''syscall''

<blockquote>System call performance (throughput).
</blockquote>
''mem''

<blockquote>Memory access performance.
</blockquote>
''numa''

<blockquote>NUMA scheduling and MM benchmarks.
</blockquote>
''futex''

<blockquote>Futex stressing benchmarks.
</blockquote>
''epoll''

<blockquote>Eventpoll (epoll) stressing benchmarks.
</blockquote>
''internals''

<blockquote>Benchmark internal perf functionality.
</blockquote>
''all''

<blockquote>All benchmark subsystems.
</blockquote>
== SUITES FOR ''sched'' ==

'''messaging'''

<blockquote>Suite for evaluating performance of scheduler and IPC mechanisms. Based on hackbench by Rusty Russell.
</blockquote>
<br />


'''Options of messaging'''

<blockquote>-p, --pipe

<blockquote>Use pipe() instead of socketpair()
</blockquote>
-t, --thread

<blockquote>Be multi thread instead of multi process
</blockquote>
-g, --group=

<blockquote>Specify number of groups
</blockquote>
-l, --nr_loops=

<blockquote>Specify number of loops
</blockquote></blockquote>
<br />


'''Example of messaging'''

<blockquote><blockquote><pre>
.ft C
% perf bench sched messaging                 # run with default
options (20 sender and receiver processes per group)
(10 groups == 400 processes run)

      Total time:0.308 sec

% perf bench sched messaging -t -g 20        # be multi-thread, with 20 groups
(20 sender and receiver threads per group)
(20 groups == 800 threads run)

      Total time:0.582 sec
.ft
</pre></blockquote>
'''pipe'''

<blockquote>Suite for pipe() system call. Based on pipe-test-1m.c by Ingo Molnar.
</blockquote></blockquote>
<br />


'''Options of pipe'''

<blockquote>-l, --loop=

<blockquote>Specify number of loops.
</blockquote></blockquote>
<br />


'''Example of pipe'''

<blockquote><blockquote><pre>
.ft C
% perf bench sched pipe
(executing 1000000 pipe operations between two tasks)

        Total time:8.091 sec
                8.091833 usecs/op
                123581 ops/sec

% perf bench sched pipe -l 1000              # loop 1000
(executing 1000 pipe operations between two tasks)

        Total time:0.016 sec
                16.948000 usecs/op
                59004 ops/sec
.ft
</pre></blockquote></blockquote>
== SUITES FOR ''syscall'' ==

'''basic'''

<blockquote>Suite for evaluating performance of core system call throughput (both usecs/op and ops/sec metrics). This uses a single thread simply doing getppid(2), which is a simple syscall where the result is not cached by glibc.
</blockquote>
== SUITES FOR ''mem'' ==

'''memcpy'''

<blockquote>Suite for evaluating performance of simple memory copy in various ways.
</blockquote>
<br />


'''Options of memcpy'''

<blockquote>-l, --size

<blockquote>Specify size of memory to copy (default: 1MB). Available units are B, KB, MB, GB and TB (case insensitive).
</blockquote>
-f, --function

<blockquote>Specify function to copy (default: default). Available functions are depend on the architecture. On x86-64, x86-64-unrolled, x86-64-movsq and x86-64-movsb are supported.
</blockquote>
-l, --nr_loops

<blockquote>Repeat memcpy invocation this number of times.
</blockquote>
-c, --cycles

<blockquote>Use perf’s cpu-cycles event instead of gettimeofday syscall.
</blockquote>
'''memset'''

<blockquote>Suite for evaluating performance of simple memory set in various ways.
</blockquote></blockquote>
<br />


'''Options of memset'''

<blockquote>-l, --size

<blockquote>Specify size of memory to set (default: 1MB). Available units are B, KB, MB, GB and TB (case insensitive).
</blockquote>
-f, --function

<blockquote>Specify function to set (default: default). Available functions are depend on the architecture. On x86-64, x86-64-unrolled, x86-64-stosq and x86-64-stosb are supported.
</blockquote>
-l, --nr_loops

<blockquote>Repeat memset invocation this number of times.
</blockquote>
-c, --cycles

<blockquote>Use perf’s cpu-cycles event instead of gettimeofday syscall.
</blockquote></blockquote>
== SUITES FOR ''numa'' ==

'''mem'''

<blockquote>Suite for evaluating NUMA workloads.
</blockquote>
== SUITES FOR ''futex'' ==

'''hash'''

<blockquote>Suite for evaluating hash tables.
</blockquote>
'''wake'''

<blockquote>Suite for evaluating wake calls.
</blockquote>
'''wake-parallel'''

<blockquote>Suite for evaluating parallel wake calls.
</blockquote>
'''requeue'''

<blockquote>Suite for evaluating requeue calls.
</blockquote>
'''lock-pi'''

<blockquote>Suite for evaluating futex lock_pi calls.
</blockquote>
== SUITES FOR ''epoll'' ==

'''wait'''

<blockquote>Suite for evaluating concurrent epoll_wait calls.
</blockquote>
'''ctl'''

<blockquote>Suite for evaluating multiple epoll_ctl calls.
</blockquote>
== SUITES FOR ''internals'' ==

'''synthesize'''

<blockquote>Suite for evaluating perf’s event synthesis performance.
</blockquote>
= SEE ALSO =

[[Latest Manual Page of perf.1|<tt>'''perf'''(1)</tt>]]


= KERNEL VERSION =

This page is auto-generated.  The kernel version is v6.0